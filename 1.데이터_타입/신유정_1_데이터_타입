# 데이터 타입

핵심 키워드: 불변

[종류]; 2 types
-기본형(원시형) primitive type
-참조형 referenct type
-> 연산 시 둘 다 복제! BUT 기본형; 주솟값 바로 복제 *불변성 / 참조형; 주솟값 이루어진 '묶음을 가리키는' 주솟값 복제

비트 bit: 0,1로 나타낸 하나의 메모리 조각
-고유한 식별자 unique identifier 통해 위치 확인 가능!
*또다른 식별자; memory address
모든 data는 바이트(byte)단위의 식별자, 메모리 주솟값을 통해 서로 구분하고 연결 가능
[1byte=8bit=2^8]

*정적 타입 언어 & 형변환
but JS; 메모리 용량↑로 형변환 거의 불필요

[변수 선언 & 데이터 할당]
변수 선언: 메모리에서 비어 있는 메모리 공간 하나 확보하여 임의로 정하고 이 공간의 이름(식별자)을 지정! -- 지은이 calls it '변수 영역'
데이터 할당: 메모리 공간에 data 저장하고 검색을 거쳐 그 저장한 '주소'를 변수에 저장! -- 지은이 calls it '데이터 영역'

[불변값 vs. 가변값]
불변값: 기본형 데이터
가변값: 多 참조형 데이터
      *별도의 변수 영역 마련(객체의 변수(property) 영역이 별도로 존재)
*중첩객체&재할당
  -할당 카운트가 0이 되면 GC 대상(Garbage Collector)
  
[변수 복사]
기본형 vs 참조형
'기본형은 값을 복사하고 참조형은 주솟값을 복사한다'
- technically wrong!
모든 data type은 주소 복사! but 기본형: 복사과정 1번 / 참조형: MORE!

[불변 객체] Immutable Object
*나의 정리:
data 자체를 건드린다? - 변수 영역 / property를 건드린다? - 데이터 영역
=> 데이터 영역, 내부 property 변경 시 "가변"

내부 property 변경할 필요 있을 때마다
-매번 객체를 만들어 재할당하기로 규칙을 정하거나
  *대상 객체의 수
   대상 객체의 property 개수에 상관없이 모든 property를 복사하는 함수 만들기 (ex. copyObject(p.23))
   ->단, 협업하는 모든 개발자들이 user 객체 내부의 변경이 필요할 땐 copyObject 함수 사용해야함
-자동으로 새로운 객체를 만드는 도구 활용
한다면 객체 역시 불변성 확보 가능!

*WHEN 불변성 확보/불변 객체 필요?
-> 값으로 전달받은 객체에 변경을 가하더라도 원본 객체는 변하지 않아야 하는 경우
